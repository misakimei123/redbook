// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/misakimei123/redbook/internal/repository"
	"github.com/misakimei123/redbook/internal/repository/cache"
	"github.com/misakimei123/redbook/internal/repository/cache/code"
	"github.com/misakimei123/redbook/internal/repository/dao"
	"github.com/misakimei123/redbook/internal/service"
	"github.com/misakimei123/redbook/internal/web"
	"github.com/misakimei123/redbook/internal/web/ginadaptor"
	"github.com/misakimei123/redbook/internal/web/jwt"
	"github.com/misakimei123/redbook/ioc"
	"github.com/misakimei123/redbook/pkg/distribute/lock"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitWebServer() *App {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJWTHandler(cmdable)
	loggerV1 := ioc.InitialLogger()
	v := ioc.InitGinMiddlewares(cmdable, handler, loggerV1)
	db := ioc.InitDB(loggerV1)
	userDao := dao.NewGormUserDao(db)
	profileDao := dao.NewGormProfileDao(db)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewCacheUserRepository(userDao, profileDao, userCache)
	userService := service.NewUserService(userRepository)
	codeCache := code.NewRedisCodeCache(cmdable)
	codeRepository := repository.NewCacheCodeRepository(codeCache)
	smsService := ioc.InitSMSService()
	codeService := service.NewCodeService(codeRepository, smsService)
	context := ginadaptor.NewLogContextBuilder(loggerV1)
	userHandler := web.NewUserHandler(userService, codeService, handler, context)
	articleDao := dao.NewArticleGormDao(db)
	articleCache := cache.NewArticleRedisCache(cmdable)
	articleRepository := repository.NewCachedArticleRepository(articleDao, articleCache, userRepository)
	client := ioc.InitSaramaClient()
	syncProducer := ioc.InitialProducer(client)
	producer := ioc.InitialSaramaSyncProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, producer, loggerV1)
	clientv3Client := ioc.InitEtcdClient()
	interactiveServiceClient := ioc.InitIntrClientV1(clientv3Client)
	rankingCache := cache.NewRedisRankingCache(cmdable)
	rankingRepository := repository.NewCachedRankingRepository(rankingCache, loggerV1)
	rankingService := service.NewArticleRankingService(rankingRepository, articleService, interactiveServiceClient, loggerV1)
	articleHandler := web.NewArticleHandler(articleService, interactiveServiceClient, loggerV1, rankingService)
	wechatService := ioc.InitWechatService()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, handler)
	engine := ioc.InitWebServer(v, userHandler, articleHandler, oAuth2WechatHandler)
	v2 := ioc.InitConsumers()
	lockLock := lock.NewRedisLock(cmdable)
	loadBalance := ioc.InitBalancer(cmdable, loggerV1)
	job := ioc.InitRankingJob(rankingService, loggerV1, lockLock, loadBalance)
	cron := ioc.InitJobs(job, loggerV1)
	app := &App{
		server:    engine,
		consumers: v2,
		cron:      cron,
	}
	return app
}

// wire.go:

var (
	rankingSvcSet = wire.NewSet(cache.NewRedisRankingCache, repository.NewCachedRankingRepository, service.NewArticleRankingService)
)
