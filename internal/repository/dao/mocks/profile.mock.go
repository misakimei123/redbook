// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/dao/profile.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/dao/profile.go -package=daomocks -destination=./internal/repository/dao/mocks/profile.mock.go
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"

	dao "github.com/misakimei123/redbook/internal/repository/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockProfileDao is a mock of ProfileDao interface.
type MockProfileDao struct {
	ctrl     *gomock.Controller
	recorder *MockProfileDaoMockRecorder
}

// MockProfileDaoMockRecorder is the mock recorder for MockProfileDao.
type MockProfileDaoMockRecorder struct {
	mock *MockProfileDao
}

// NewMockProfileDao creates a new mock instance.
func NewMockProfileDao(ctrl *gomock.Controller) *MockProfileDao {
	mock := &MockProfileDao{ctrl: ctrl}
	mock.recorder = &MockProfileDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileDao) EXPECT() *MockProfileDaoMockRecorder {
	return m.recorder
}

// FindByUserId mocks base method.
func (m *MockProfileDao) FindByUserId(ctx context.Context, userId int64) (dao.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].(dao.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockProfileDaoMockRecorder) FindByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockProfileDao)(nil).FindByUserId), ctx, userId)
}

// Update mocks base method.
func (m *MockProfileDao) Update(ctx context.Context, profile *dao.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProfileDaoMockRecorder) Update(ctx, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProfileDao)(nil).Update), ctx, profile)
}
