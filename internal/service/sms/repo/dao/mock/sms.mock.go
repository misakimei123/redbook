// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/sms/repo/dao/sms.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/sms/repo/dao/sms.go -package=smsdao -destination=./internal/service/sms/repo/dao/mock/sms.mock.go
//

// Package smsdao is a generated GoMock package.
package smsdao

import (
	context "context"
	reflect "reflect"

	dao "github.com/misakimei123/redbook/internal/service/sms/repo/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockSMSDao is a mock of SMSDao interface.
type MockSMSDao struct {
	ctrl     *gomock.Controller
	recorder *MockSMSDaoMockRecorder
}

// MockSMSDaoMockRecorder is the mock recorder for MockSMSDao.
type MockSMSDaoMockRecorder struct {
	mock *MockSMSDao
}

// NewMockSMSDao creates a new mock instance.
func NewMockSMSDao(ctrl *gomock.Controller) *MockSMSDao {
	mock := &MockSMSDao{ctrl: ctrl}
	mock.recorder = &MockSMSDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMSDao) EXPECT() *MockSMSDaoMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockSMSDao) Insert(ctx context.Context, sms dao.SMS) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, sms)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSMSDaoMockRecorder) Insert(ctx, sms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSMSDao)(nil).Insert), ctx, sms)
}

// QueryAndUpdate mocks base method.
func (m *MockSMSDao) QueryAndUpdate(ctx context.Context, oldStatus, newStatus string) (dao.SMS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAndUpdate", ctx, oldStatus, newStatus)
	ret0, _ := ret[0].(dao.SMS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAndUpdate indicates an expected call of QueryAndUpdate.
func (mr *MockSMSDaoMockRecorder) QueryAndUpdate(ctx, oldStatus, newStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAndUpdate", reflect.TypeOf((*MockSMSDao)(nil).QueryAndUpdate), ctx, oldStatus, newStatus)
}

// Update mocks base method.
func (m *MockSMSDao) Update(ctx context.Context, id int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSMSDaoMockRecorder) Update(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSMSDao)(nil).Update), ctx, id, status)
}
