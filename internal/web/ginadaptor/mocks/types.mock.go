// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/web/ginadaptor/types.go
//
// Generated by this command:
//
//	mockgen -source=./internal/web/ginadaptor/types.go -package=ginadaptormocks -destination=./internal/web/ginadaptor/mocks/types.mock.go
//

// Package ginadaptormocks is a generated GoMock package.
package ginadaptormocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	ginadaptor "github.com/misakimei123/redbook/internal/web/ginadaptor"
	gomock "go.uber.org/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// ConvertCtx mocks base method.
func (m *MockContext) ConvertCtx(f func(*ginadaptor.LogContext)) gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertCtx", f)
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// ConvertCtx indicates an expected call of ConvertCtx.
func (mr *MockContextMockRecorder) ConvertCtx(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertCtx", reflect.TypeOf((*MockContext)(nil).ConvertCtx), f)
}
